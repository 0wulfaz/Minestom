import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import it.unimi.dsi.fastutil.shorts.Short2ObjectOpenHashMap;
import net.minestom.server.instance.block.Block;
import net.minestom.server.instance.block.BlockAlternative;
import net.minestom.server.registry.ResourceGatherer;
import net.minestom.server.utils.NamespaceID;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.URL;
import java.util.*;

/**
 * Generates a Block enum containing all data about blocks
 */
public class BlockEnumGenerator {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlockEnumGenerator.class);

    private static final String DEFAULT_TARGET_PATH = "src/autogenerated/java";
    public static final String MC_DATA_BLOCKS_PATH = "minecraft_data/reports/blocks.json";
    public static final String PRISMARINE_JS_DATA_PATHS = "prismarine-minecraft-data/data/dataPaths.json";
    public static final String BURGER_URL_BASE_URL = "https://pokechu22.github.io/Burger/";

    public static void main(String[] args) throws IOException {
        try {
            ResourceGatherer.ensureResourcesArePresent(null); // TODO
        } catch (IOException e) {
            e.printStackTrace();
        }
        String targetVersion = "1.15.2";
        if(args.length >= 1) {
            targetVersion = args[0];
        }

        String targetPart = DEFAULT_TARGET_PATH;
        if(args.length >= 2) {
            targetPart = args[1];
        }

        File targetFolder = new File(targetPart);
        if(!targetFolder.exists()) {
            targetFolder.mkdirs();
        }

        Gson gson = new Gson();

        // load report blocks and block states
        LOGGER.debug("Loading information from data extraction");
        List<DataReportBlock> dataBlocks = parseBlocksFromMCData(gson, MC_DATA_BLOCKS_PATH);
        // load properties from Prismarine
        LOGGER.debug("Finding path for PrismarineJS blocks");
        JsonObject dataPaths = gson.fromJson(new BufferedReader(new FileReader(PRISMARINE_JS_DATA_PATHS)), JsonObject.class);
        JsonObject pathsJson = dataPaths.getAsJsonObject("pc").getAsJsonObject(targetVersion);

        PrismarinePaths paths = gson.fromJson(pathsJson, PrismarinePaths.class);
        LOGGER.debug("Loading PrismarineJS blocks data");
        List<PrismarineJSBlock> prismarineJSBlocks = parseBlocksFromPrismarineJS(gson, paths.getBlockFile());

        LOGGER.debug("Loading Burger blocks data (requires Internet connection)");
        List<BurgerBlock> burgerBlocks = parseBlocksFromBurger(gson, BURGER_URL_BASE_URL+targetVersion+".json");

        LOGGER.debug("Compiling information");
        Collection<BlockContainer> blocks = compile(dataBlocks, prismarineJSBlocks, burgerBlocks);

        LOGGER.debug("Compilation finished, code generation can now begin");

        generateEnum(targetPart, blocks);
        LOGGER.debug("Finished!");
    }

    private static void generateEnum(String targetPart, Collection<BlockContainer> blocks) throws IOException {
        String packageName = "net.minestom.instance.block";
        String folder = packageName.replace(".", "/");
        String className = "TmpBlock";
        EnumGenerator blockGenerator = new EnumGenerator(packageName, className);
        blockGenerator.addClassAnnotation("@SuppressWarnings({\"deprecation\"})");
        blockGenerator.addImport(NamespaceID.class.getCanonicalName());
        blockGenerator.addImport(BlockAlternative.class.getCanonicalName());
        blockGenerator.addImport(List.class.getCanonicalName());
        blockGenerator.addImport(ArrayList.class.getCanonicalName());
        blockGenerator.addImport(Arrays.class.getCanonicalName());
        blockGenerator.addImport(Short2ObjectOpenHashMap.class.getCanonicalName());
        blockGenerator.addImport(blockGenerator.getPackage()+".states.*");
        blockGenerator.addHardcodedField("List<BlockAlternative>", "alternatives", "new ArrayList<BlockAlternative>()");
        blockGenerator.addHardcodedField("static Short2ObjectOpenHashMap<"+className+">", "blocksMap", "new Short2ObjectOpenHashMap<>()");
        blockGenerator.setParams("String namespaceID", "short defaultID", "double hardness", "double resistance", "boolean isAir", "boolean isSolid", "NamespaceID blockEntity", "boolean singleState");
        blockGenerator.addMethod("getId", "()", "short", "return defaultID;");
        blockGenerator.addMethod("isAir", "()", "boolean", "return isAir;");
        blockGenerator.addMethod("hasBlockEntity", "()", "boolean", "return blockEntity != null;");
        blockGenerator.addMethod("getBlockEntityName", "()", "NamespaceID", "return blockEntity;");
        blockGenerator.addMethod("isSolid", "()", "boolean", "return isSolid;");
        blockGenerator.addMethod("getHardness", "()", "double", "return hardness;");
        blockGenerator.addMethod("getResistance", "()", "double", "return resistance;");
        blockGenerator.addMethod("breaksInstantaneously", "()", "boolean", "return hardness == 0;");
        blockGenerator.addMethod("addBlockAlternative", "(BlockAlternative alternative)", "void",
                "alternatives.add(alternative);",
                "blocksMap.put(alternative.getId(), this);"
        );
        String[] withPropertiesLines = {
            "for (BlockAlternative alt : alternatives) {",
            "\tif (Arrays.equals(alt.getProperties(), properties)) {",
            "\t\treturn alt.getId();",
            "\t}",
            "}",
            "return defaultID;"
        };
        blockGenerator.addMethod("withProperties", "(String... properties)", "short", withPropertiesLines);
        blockGenerator.addMethod("fromId", "(short blockId)", "static "+className, "return blocksMap.getOrDefault(blockId, AIR);");
        blockGenerator.appendToConstructor("if(singleState) {");
        blockGenerator.appendToConstructor("\taddBlockAlternative(new BlockAlternative(defaultID));");
        blockGenerator.appendToConstructor("}");
        LOGGER.debug("Generating enum");
        StringBuilder staticBlock = new StringBuilder();
        Map<String, String> subclassContents = new HashMap<>();
        for (BlockContainer block : blocks) {
            String instanceName = block.getId().getPath().toUpperCase();
            blockGenerator.addInstance(instanceName,
                    "\""+block.getId().toString()+"\"",
                    "(short) "+block.getDefaultState().getId(),
                    block.getHardness(),
                    block.getResistance(),
                    block.isAir(),
                    block.isSolid(),
                    block.getBlockEntityName() != null ? "NamespaceID.from(\""+block.getBlockEntityName()+"\")" : "null",
                    block.getStates().size() == 1 // used to avoid duplicates inside the 'alternatives' field due to both constructor addition and subclasses initStates()
            );

            // do not add alternative for default states. This will be added by default inside the constructor
            if(block.getStates().size() > 1) {
                StringBuilder subclass = new StringBuilder();
                for(BlockContainer.BlockState state : block.getStates()) {
                    if(state == block.getDefaultState())
                        continue;
                    // generate BlockAlternative instance that will be used to lookup block alternatives

                    subclass.append(instanceName).append(".addBlockAlternative(");
                    subclass.append("new BlockAlternative(");
                    subclass.append("(short) ").append(state.getId());

                    if(state.getProperties() != null) {
                        for(var property : state.getProperties().entrySet()) {
                            subclass.append(", ");
                            subclass.append("\"").append(property.getKey()).append("=").append(property.getValue()).append("\"");
                        }
                    }
                    subclass.append(")").append(");\n");
                }
                String blockName = snakeCaseToCapitalizedCamelCase(block.getId().getPath());
                blockName = blockName.replace("_", "");
                subclassContents.put(blockName, subclass.toString());
                staticBlock.append("\t\t").append(blockName).append(".initStates();\n");
            }
        }

        blockGenerator.setStaticInitBlock(staticBlock.toString());

        File classFolder = new File(targetPart+"/"+folder);
        if(!classFolder.exists()) {
            classFolder.mkdirs();
        }
        File subclassFolder = new File(classFolder, "states");
        if(!subclassFolder.exists()) {
            subclassFolder.mkdirs();
        }

        LOGGER.debug("Writing enum to file: "+classFolder+"/"+className+".java");
        try(Writer writer = new BufferedWriter(new FileWriter(new File(classFolder, className+".java")))) {
            writer.write(blockGenerator.generate());
        }

        LOGGER.debug("Writing subclasses for block alternatives...");
        StringBuilder classContents = new StringBuilder();
        for (var entry : subclassContents.entrySet()) {
            classContents.delete(0, classContents.length());
            String subclass = entry.getKey();
            LOGGER.debug("\t Writing subclass "+subclass+"... ");

            String contents = entry.getValue();
            classContents.append("package ").append(blockGenerator.getPackage()).append(".states;\n");
            classContents.append("import ").append(BlockAlternative.class.getCanonicalName()).append(";\n");
            classContents.append("import static ").append(blockGenerator.getPackage()).append(".").append(blockGenerator.getEnumName()).append(".*;\n");
            classContents.append("/**\n");
            classContents.append(" * Completely internal. DO NOT USE. IF YOU ARE A USER AND FACE A PROBLEM WHILE USING THIS CODE, THAT'S ON YOU.\n");
            classContents.append(" */\n");
            classContents.append("@Deprecated(forRemoval = false, since = \"forever\")\n");
            classContents.append("public class ").append(subclass).append(" {\n");
            classContents.append("\tpublic static void initStates() {\n");

            String[] lines = contents.split("\n");
            for(String line : lines) {
                classContents.append("\t\t").append(line).append("\n");
            }

            classContents.append("\t}\n");
            classContents.append("}\n");

            try(Writer writer = new BufferedWriter(new FileWriter(new File(subclassFolder, subclass+".java")))) {
                writer.write(classContents.toString());
            }
            LOGGER.debug("\t\t - Done");
        }
    }

    private static String snakeCaseToCapitalizedCamelCase(String identifier) {
        boolean capitalizeNext = true;
        StringBuilder result = new StringBuilder();
        char[] chars = identifier.toCharArray();
        for (int i = 0; i < identifier.length(); i++) {
            char currentCharacter = chars[i];
            if(capitalizeNext) {
                result.append(Character.toUpperCase(currentCharacter));
                capitalizeNext = false;
            } else if(currentCharacter == '_') {
                capitalizeNext = true;
            } else {
                result.append(currentCharacter);
            }
        }
        return result.toString();
    }

    /**
     * Compiles all block information in a single location
     * @param dataBlocks
     * @param prismarineJSBlocks
     * @param burgerBlocks
     */
    private static Collection<BlockContainer> compile(List<DataReportBlock> dataBlocks, List<PrismarineJSBlock> prismarineJSBlocks, List<BurgerBlock> burgerBlocks) {
        TreeSet<BlockContainer> blocks = new TreeSet<>(BlockContainer::compareTo);
        // ensure the 3 list have the same length and order
        dataBlocks.sort(Comparator.comparing(block -> block.name.toString()));
        prismarineJSBlocks.sort(Comparator.comparing(block -> NamespaceID.from(block.name).toString()));
        burgerBlocks.sort(Comparator.comparing(block -> NamespaceID.from(block.text_id).toString()));

        for (int i = 0; i < dataBlocks.size(); i++) {
            DataReportBlock data = dataBlocks.get(i);
            PrismarineJSBlock prismarine = prismarineJSBlocks.get(i);
            BurgerBlock burger = burgerBlocks.get(i);

            assert data.name.getPath().equals(prismarine.name) && prismarine.name.equalsIgnoreCase(burger.text_id);

            List<BlockContainer.BlockState> states = new LinkedList<>();
            for(DataReportBlock.BlockState s : data.states) {
                states.add(new BlockContainer.BlockState(s.id, s.properties));
            }

            BlockContainer.BlockState defaultState = new BlockContainer.BlockState(data.defaultState.id, data.defaultState.properties);

            BlockContainer block = new BlockContainer(prismarine.id, data.name, prismarine.hardness, burger.resistance, burger.blockEntity == null ? null : NamespaceID.from(burger.blockEntity.name), defaultState, states);
            if(!"empty".equals(prismarine.boundingBox)) {
                block.setSolid();
            }
            if(data.name.equals(NamespaceID.from("minecraft:water")) || data.name.equals(NamespaceID.from("minecraft:lava"))) {
                block.setLiquid();
            }
            if(data.name.equals(NamespaceID.from("minecraft:air"))) {
                block.setAir();
            }

            blocks.add(block);
        }

        return blocks;
    }

    /**
     * Extracts block information from Burger
     * @param gson
     * @param url
     * @return
     * @throws IOException
     */
    private static List<BurgerBlock> parseBlocksFromBurger(Gson gson, String url) throws IOException {
        try(BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()))) {
            LOGGER.debug("\tConnection established, reading file");
            JsonObject dictionary = gson.fromJson(bufferedReader, JsonArray.class).get(0).getAsJsonObject();
            JsonObject tileEntityMap = dictionary.getAsJsonObject("tileentity").getAsJsonObject("tileentities");

            Map<String, BurgerTileEntity> block2entityMap = new HashMap<>();
            for(var entry : tileEntityMap.entrySet()) {
                BurgerTileEntity te = gson.fromJson(entry.getValue(), BurgerTileEntity.class);
                if(te.blocks != null) {
                    for(String block : te.blocks) {
                        block2entityMap.put(block, te);
                    }
                }
            }

            JsonObject blockMap = dictionary.getAsJsonObject("blocks").getAsJsonObject("block");

            LOGGER.debug("\tExtracting blocks");
            List<BurgerBlock> blocks = new LinkedList<>();
            for(var entry : blockMap.entrySet()) {
                BurgerBlock block = gson.fromJson(entry.getValue(), BurgerBlock.class);
                block.blockEntity = block2entityMap.get(block.text_id);
                blocks.add(block);
            }

            return blocks;
        } catch (IOException e) {
            throw e;
        }
    }

    /**
     * Extract block information from PrismarineJS (submodule of Minestom)
     * @param gson
     * @param blockFile
     * @return
     * @throws IOException
     */
    private static List<PrismarineJSBlock> parseBlocksFromPrismarineJS(Gson gson, File blockFile) throws IOException {
        try(BufferedReader bufferedReader = new BufferedReader(new FileReader(blockFile))) {
            PrismarineJSBlock[] blocks = gson.fromJson(bufferedReader, PrismarineJSBlock[].class);
            return Arrays.asList(blocks);
        } catch (IOException e) {
            throw e;
        }
    }

    /**
     * Extract block information from reports generated by the data extractor present in minecraft_server.jar
     * @param gson
     * @param path
     * @return
     */
    private static List<DataReportBlock> parseBlocksFromMCData(Gson gson, String path) {
        List<DataReportBlock> blocks = new LinkedList<>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(path));

            JsonObject obj = gson.fromJson(bufferedReader, JsonObject.class);
            for(var entry : obj.entrySet()) {
                NamespaceID id = NamespaceID.from(entry.getKey());
                JsonElement blockInfo = entry.getValue();
                DataReportBlock block = gson.fromJson(blockInfo, DataReportBlock.class);
                block.bindDefaultState();
                block.name = id;

                blocks.add(block);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }


        return blocks;
    }
}
